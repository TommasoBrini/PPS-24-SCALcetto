package dsl.creation

import dsl.creation.build.{BallBuilder, MatchBuilder, PlayerBuilder, TeamBuilder}
import model.Match.{MatchState, Score, Side}

import scala.language.postfixOps

/** Front-facing **syntax object** that stitches together the low-level builders so that scenario code reads naturally.
  * Example:
  * {{{
  * newMatch(score):
  *   team(West):
  *    …
  *   team(East):
  *    …
  *   ball at (x,y) move (dir, speed)
  * }}}
  * All functions rely on contextual builders provided through `using` clauses.
  */
object CreationSyntax:

  /** Starts a new match scenario and yields the finished `Match`.
    *
    * @param score
    *   initial score
    * @param body
    *   configuration block executed with an implicit MatchBuilder
    * @return
    *   the immutable match generated by the block
    */
  def newMatch(score: Score)(body: MatchBuilder ?=> Unit): MatchState =
    given scope: MatchBuilder = MatchBuilder(score)
    body(using scope)
    scope.build()

  /** Opens a `TeamBuilder` tied to the current `MatchBuilder` scope. */
  def team(side: Side)(using mb: MatchBuilder): TeamBuilder =
    mb.team(side)

  /** Returns the `BallBuilder` associated with the current match. */
  def ball(using mb: MatchBuilder): BallBuilder =
    mb.ball

  /** Opens a `PlayerBuilder` tied to the current `TeamBuilder` scope. */
  def player(id: Int)(using tb: TeamBuilder): PlayerBuilder =
    tb.player(id)
